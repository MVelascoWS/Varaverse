//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace VARANET.NetApiExt.Generated.Storage
{
    
    
    public sealed class ValidatorSetStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public ValidatorSetStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ValidatorSet", "Validators"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ValidatorSet", "ApprovedValidators"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ValidatorSet", "OfflineValidators"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>)));
        }
        
        /// <summary>
        /// >> ValidatorsParams
        /// </summary>
        public static string ValidatorsParams()
        {
            return RequestGenerator.GetStorage("ValidatorSet", "Validators", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ValidatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Validators
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> Validators(CancellationToken token)
        {
            string parameters = ValidatorSetStorage.ValidatorsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ApprovedValidatorsParams
        /// </summary>
        public static string ApprovedValidatorsParams()
        {
            return RequestGenerator.GetStorage("ValidatorSet", "ApprovedValidators", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ApprovedValidatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string ApprovedValidatorsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ApprovedValidators
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> ApprovedValidators(CancellationToken token)
        {
            string parameters = ValidatorSetStorage.ApprovedValidatorsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> OfflineValidatorsParams
        /// </summary>
        public static string OfflineValidatorsParams()
        {
            return RequestGenerator.GetStorage("ValidatorSet", "OfflineValidators", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> OfflineValidatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string OfflineValidatorsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OfflineValidators
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> OfflineValidators(CancellationToken token)
        {
            string parameters = ValidatorSetStorage.OfflineValidatorsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(parameters, token);
            return result;
        }
    }
    
    public sealed class ValidatorSetCalls
    {
        
        /// <summary>
        /// >> add_validator
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AddValidator(VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 validator_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(validator_id.Encode());
            return new Method(98, "ValidatorSet", 0, "add_validator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_validator
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveValidator(VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 validator_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(validator_id.Encode());
            return new Method(98, "ValidatorSet", 1, "remove_validator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_validator_again
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AddValidatorAgain(VARANET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 validator_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(validator_id.Encode());
            return new Method(98, "ValidatorSet", 2, "add_validator_again", byteArray.ToArray());
        }
    }
    
    public sealed class ValidatorSetConstants
    {
    }
    
    public enum ValidatorSetErrors
    {
        
        /// <summary>
        /// >> TooLowValidatorCount
        /// Target (post-removal) validator count is below the minimum.
        /// </summary>
        TooLowValidatorCount,
        
        /// <summary>
        /// >> Duplicate
        /// Validator is already in the validator set.
        /// </summary>
        Duplicate,
        
        /// <summary>
        /// >> ValidatorNotApproved
        /// Validator is not approved for re-addition.
        /// </summary>
        ValidatorNotApproved,
        
        /// <summary>
        /// >> BadOrigin
        /// Only the validator can add itself back after coming online.
        /// </summary>
        BadOrigin,
    }
}
