{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Index",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Index",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "misc_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fee_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 8
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 8
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 8
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 8
          }
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 9
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 9
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "9": {
        "TypeId": 10,
        "TypeDef": "Compact"
      },
      "10": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "11": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "12": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "13": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "14": {
        "TypeId": 15,
        "TypeDef": "Sequence"
      },
      "15": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "16": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "17": {
        "TypeId": 18,
        "TypeDef": "Sequence"
      },
      "18": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 84
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 19
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 85
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 19
          },
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "19": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 20
              }
            ],
            "Index": 0
          },
          {
            "Name": "Grandpa",
            "TypeFields": [
              {
                "TypeName": "pallet_grandpa::Event",
                "TypeId": 29
              }
            ],
            "Index": 4
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 34
              }
            ],
            "Index": 5
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 36
              }
            ],
            "Index": 6
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "pallet_session::Event",
                "TypeId": 37
              }
            ],
            "Index": 7
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 38
              }
            ],
            "Index": 8
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 41
              }
            ],
            "Index": 9
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 44
              }
            ],
            "Index": 10
          },
          {
            "Name": "ValidatorSet",
            "TypeFields": [
              {
                "TypeName": "validator_set::Event<Runtime>",
                "TypeId": 46
              }
            ],
            "Index": 98
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "pallet_sudo::Event<Runtime>",
                "TypeId": 47
              }
            ],
            "Index": 99
          },
          {
            "Name": "Gear",
            "TypeFields": [
              {
                "TypeName": "pallet_gear::Event<Runtime>",
                "TypeId": 49
              }
            ],
            "Index": 104
          }
        ],
        "Path": [
          "gear_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "20": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 24
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "21": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 22
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 23
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "22": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "23": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "24": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 25
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 26
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 27
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 28
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "26": {
        "Variants": [
          {
            "Name": "NoFunds",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "27": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "NewAuthorities",
            "TypeFields": [
              {
                "Name": "authority_set",
                "TypeName": "AuthorityList",
                "TypeId": 30
              }
            ],
            "Index": 0,
            "Docs": [
              "New authority set has been applied."
            ]
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Current authority set has been paused."
            ]
          },
          {
            "Name": "Resumed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Current authority set has been resumed."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "30": {
        "TypeId": 31,
        "TypeDef": "Sequence"
      },
      "31": {
        "TypeIds": [
          32,
          10
        ],
        "TypeDef": "Tuple"
      },
      "32": {
        "TypeFields": [
          {
            "TypeName": "ed25519::Public",
            "TypeId": 33
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "33": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "34": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 35
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "35": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "36": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "37": {
        "Variants": [
          {
            "Name": "NewSession",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "38": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 39
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "39": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 40
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 24
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 40
          },
          {
            "Name": "E",
            "TypeId": 24
          }
        ],
        "TypeDef": "Variant"
      },
      "40": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "41": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 39
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 42
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 43
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 42
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 42
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "42": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonTransfer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "CancelProxy",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "SudoBalances",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "gear_runtime",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "43": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "44": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 45
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 45
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 39
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 45
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "45": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "46": {
        "Variants": [
          {
            "Name": "ValidatorAdditionInitiated",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "New validator addition initiated. Effective in ~2 sessions."
            ]
          },
          {
            "Name": "ValidatorRemovalInitiated",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Validator removal initiated. Effective in ~2 sessions."
            ]
          }
        ],
        "Path": [
          "substrate_validator_set",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "47": {
        "Variants": [
          {
            "Name": "Sudid",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 39
              }
            ],
            "Index": 0,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": [
              {
                "Name": "old_sudoer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 48
              }
            ],
            "Index": 1,
            "Docs": [
              "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
            ]
          },
          {
            "Name": "SudoAsDone",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 39
              }
            ],
            "Index": 2,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "48": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "49": {
        "Variants": [
          {
            "Name": "MessageQueued",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "MessageId",
                "TypeId": 50,
                "Docs": [
                  "Generated id of the message."
                ]
              },
              {
                "Name": "source",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "Account id of the source of the message."
                ]
              },
              {
                "Name": "destination",
                "TypeName": "ProgramId",
                "TypeId": 51,
                "Docs": [
                  "Program id, who is the message's destination."
                ]
              },
              {
                "Name": "entry",
                "TypeName": "MessageEntry",
                "TypeId": 52,
                "Docs": [
                  "Entry point for processing of the message.",
                  "On the sending stage, the processing function",
                  "of the program is always known."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "User sends message to program, which was successfully",
              "added to the Gear message queue."
            ]
          },
          {
            "Name": "UserMessageSent",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "StoredMessage",
                "TypeId": 53,
                "Docs": [
                  "Message sent."
                ]
              },
              {
                "Name": "expiration",
                "TypeName": "Option<T::BlockNumber>",
                "TypeId": 62,
                "Docs": [
                  "Block number of expiration from `Mailbox`.",
                  "",
                  "Equals `Some(_)` with block number when message",
                  "will be removed from `Mailbox` due to some",
                  "reasons (see #642, #646 and #1010).",
                  "",
                  "Equals `None` if message wasn't inserted to",
                  "`Mailbox` and appears as only `Event`."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Somebody sent a message to the user."
            ]
          },
          {
            "Name": "UserMessageRead",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "MessageId",
                "TypeId": 50,
                "Docs": [
                  "Id of the message read."
                ]
              },
              {
                "Name": "reason",
                "TypeName": "UserMessageReadReason",
                "TypeId": 63,
                "Docs": [
                  "The reason for the reading (removal from `Mailbox`).",
                  "",
                  "NOTE: See more docs about reasons at `gear_common::event`."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Message marked as \"read\" and removes it from `Mailbox`.",
              "This event only affects messages that were",
              "already inserted in `Mailbox`."
            ]
          },
          {
            "Name": "MessagesDispatched",
            "TypeFields": [
              {
                "Name": "total",
                "TypeName": "MessengerCapacityOf<T>",
                "TypeId": 4,
                "Docs": [
                  "Total amount of messages removed from message queue."
                ]
              },
              {
                "Name": "statuses",
                "TypeName": "BTreeMap<MessageId, DispatchStatus>",
                "TypeId": 66,
                "Docs": [
                  "Execution statuses of the messages, which were already known",
                  "by `Event::MessageQueued` (sent from user to program)."
                ]
              },
              {
                "Name": "state_changes",
                "TypeName": "BTreeSet<ProgramId>",
                "TypeId": 70,
                "Docs": [
                  "Ids of programs, which state changed during queue processing."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "The result of processing the messages within the block."
            ]
          },
          {
            "Name": "MessageWaited",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "MessageId",
                "TypeId": 50,
                "Docs": [
                  "Id of the message waited."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "Option<GasNodeId<MessageId, ReservationId>>",
                "TypeId": 72,
                "Docs": [
                  "Origin message id, which started messaging chain with programs,",
                  "where currently waited message was created.",
                  "",
                  "Used to identify by the user that this message associated",
                  "with him and the concrete initial message."
                ]
              },
              {
                "Name": "reason",
                "TypeName": "MessageWaitedReason",
                "TypeId": 75,
                "Docs": [
                  "The reason of the waiting (addition to `Waitlist`).",
                  "",
                  "NOTE: See more docs about reasons at `gear_common::event`."
                ]
              },
              {
                "Name": "expiration",
                "TypeName": "T::BlockNumber",
                "TypeId": 4,
                "Docs": [
                  "Block number of expiration from `Waitlist`.",
                  "",
                  "Equals block number when message will be removed from `Waitlist`",
                  "due to some reasons (see #642, #646 and #1010)."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "Messages execution delayed (waited) and successfully",
              "added to gear waitlist."
            ]
          },
          {
            "Name": "MessageWoken",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "MessageId",
                "TypeId": 50,
                "Docs": [
                  "Id of the message woken."
                ]
              },
              {
                "Name": "reason",
                "TypeName": "MessageWokenReason",
                "TypeId": 78,
                "Docs": [
                  "The reason of the waking (removal from `Waitlist`).",
                  "",
                  "NOTE: See more docs about reasons at `gear_common::event`."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "Message is ready to continue its execution",
              "and was removed from `Waitlist`."
            ]
          },
          {
            "Name": "CodeChanged",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "CodeId",
                "TypeId": 81,
                "Docs": [
                  "Id of the code affected."
                ]
              },
              {
                "Name": "change",
                "TypeName": "CodeChangeKind<T::BlockNumber>",
                "TypeId": 82,
                "Docs": [
                  "Change applied on code with current id.",
                  "",
                  "NOTE: See more docs about change kinds at `gear_common::event`."
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "Any data related to program codes changed."
            ]
          },
          {
            "Name": "ProgramChanged",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ProgramId",
                "TypeId": 51,
                "Docs": [
                  "Id of the program affected."
                ]
              },
              {
                "Name": "change",
                "TypeName": "ProgramChangeKind<T::BlockNumber>",
                "TypeId": 83,
                "Docs": [
                  "Change applied on program with current id.",
                  "",
                  "NOTE: See more docs about change kinds at `gear_common::event`."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "Any data related to programs changed."
            ]
          },
          {
            "Name": "QueueProcessingReverted",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The pseudo-inherent extrinsic that runs queue processing rolled back or not executed."
            ]
          }
        ],
        "Path": [
          "pallet_gear",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "50": {
        "TypeFields": [
          {
            "TypeName": "Hash",
            "TypeId": 1
          }
        ],
        "Path": [
          "gear_core",
          "ids",
          "MessageId"
        ],
        "TypeDef": "Composite"
      },
      "51": {
        "TypeFields": [
          {
            "TypeName": "Hash",
            "TypeId": 1
          }
        ],
        "Path": [
          "gear_core",
          "ids",
          "ProgramId"
        ],
        "TypeDef": "Composite"
      },
      "52": {
        "Variants": [
          {
            "Name": "Init",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Handle",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Reply",
            "TypeFields": [
              {
                "TypeName": "MessageId",
                "TypeId": 50
              }
            ],
            "Index": 2
          },
          {
            "Name": "Signal",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "MessageEntry"
        ],
        "TypeDef": "Variant"
      },
      "53": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "MessageId",
            "TypeId": 50
          },
          {
            "Name": "source",
            "TypeName": "ProgramId",
            "TypeId": 51
          },
          {
            "Name": "destination",
            "TypeName": "ProgramId",
            "TypeId": 51
          },
          {
            "Name": "payload",
            "TypeName": "Payload",
            "TypeId": 54
          },
          {
            "Name": "value",
            "TypeName": "Value",
            "TypeId": 56
          },
          {
            "Name": "details",
            "TypeName": "Option<MessageDetails>",
            "TypeId": 57
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "stored",
          "StoredMessage"
        ],
        "TypeDef": "Composite"
      },
      "54": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "gear_core",
          "buffer",
          "LimitedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "E",
            "TypeId": 55
          }
        ],
        "TypeDef": "Composite"
      },
      "55": {
        "Path": [
          "gear_core",
          "message",
          "PayloadSizeError"
        ],
        "TypeDef": "Composite"
      },
      "56": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "57": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 58
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 58
          }
        ],
        "TypeDef": "Variant"
      },
      "58": {
        "Variants": [
          {
            "Name": "Reply",
            "TypeFields": [
              {
                "TypeName": "ReplyDetails",
                "TypeId": 59
              }
            ],
            "Index": 0
          },
          {
            "Name": "Signal",
            "TypeFields": [
              {
                "TypeName": "SignalDetails",
                "TypeId": 61
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "common",
          "MessageDetails"
        ],
        "TypeDef": "Variant"
      },
      "59": {
        "TypeFields": [
          {
            "Name": "reply_to",
            "TypeName": "MessageId",
            "TypeId": 50
          },
          {
            "Name": "status_code",
            "TypeName": "StatusCode",
            "TypeId": 60
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "common",
          "ReplyDetails"
        ],
        "TypeDef": "Composite"
      },
      "60": {
        "Primitive": "I32",
        "TypeDef": "Primitive"
      },
      "61": {
        "TypeFields": [
          {
            "Name": "from",
            "TypeName": "MessageId",
            "TypeId": 50
          },
          {
            "Name": "status_code",
            "TypeName": "StatusCode",
            "TypeId": 60
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "common",
          "SignalDetails"
        ],
        "TypeDef": "Composite"
      },
      "62": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "63": {
        "Variants": [
          {
            "Name": "Runtime",
            "TypeFields": [
              {
                "TypeName": "R",
                "TypeId": 64
              }
            ],
            "Index": 0
          },
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "S",
                "TypeId": 65
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "Reason"
        ],
        "TypeParams": [
          {
            "Name": "R",
            "TypeId": 64
          },
          {
            "Name": "S",
            "TypeId": 65
          }
        ],
        "TypeDef": "Variant"
      },
      "64": {
        "Variants": [
          {
            "Name": "MessageReplied",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MessageClaimed",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "UserMessageReadRuntimeReason"
        ],
        "TypeDef": "Variant"
      },
      "65": {
        "Variants": [
          {
            "Name": "OutOfRent",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "UserMessageReadSystemReason"
        ],
        "TypeDef": "Variant"
      },
      "66": {
        "TypeFields": [
          {
            "TypeId": 68
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 50
          },
          {
            "Name": "V",
            "TypeId": 67
          }
        ],
        "TypeDef": "Composite"
      },
      "67": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Failed",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotExecuted",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "DispatchStatus"
        ],
        "TypeDef": "Variant"
      },
      "68": {
        "TypeId": 69,
        "TypeDef": "Sequence"
      },
      "69": {
        "TypeIds": [
          50,
          67
        ],
        "TypeDef": "Tuple"
      },
      "70": {
        "TypeFields": [
          {
            "TypeId": 71
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 51
          }
        ],
        "TypeDef": "Composite"
      },
      "71": {
        "TypeId": 51,
        "TypeDef": "Sequence"
      },
      "72": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 73
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 73
          }
        ],
        "TypeDef": "Variant"
      },
      "73": {
        "Variants": [
          {
            "Name": "Node",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 50
              }
            ],
            "Index": 0
          },
          {
            "Name": "Reservation",
            "TypeFields": [
              {
                "TypeName": "U",
                "TypeId": 74
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "gas_provider",
          "node",
          "GasNodeId"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 50
          },
          {
            "Name": "U",
            "TypeId": 74
          }
        ],
        "TypeDef": "Variant"
      },
      "74": {
        "TypeFields": [
          {
            "TypeName": "Hash",
            "TypeId": 1
          }
        ],
        "Path": [
          "gear_core",
          "ids",
          "ReservationId"
        ],
        "TypeDef": "Composite"
      },
      "75": {
        "Variants": [
          {
            "Name": "Runtime",
            "TypeFields": [
              {
                "TypeName": "R",
                "TypeId": 76
              }
            ],
            "Index": 0
          },
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "S",
                "TypeId": 77
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "Reason"
        ],
        "TypeParams": [
          {
            "Name": "R",
            "TypeId": 76
          },
          {
            "Name": "S",
            "TypeId": 77
          }
        ],
        "TypeDef": "Variant"
      },
      "76": {
        "Variants": [
          {
            "Name": "WaitCalled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WaitForCalled",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "WaitUpToCalled",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "WaitUpToCalledFull",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "MessageWaitedRuntimeReason"
        ],
        "TypeDef": "Variant"
      },
      "77": {
        "Variants": [
          {
            "Name": "ProgramIsNotInitialized",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "MessageWaitedSystemReason"
        ],
        "TypeDef": "Variant"
      },
      "78": {
        "Variants": [
          {
            "Name": "Runtime",
            "TypeFields": [
              {
                "TypeName": "R",
                "TypeId": 79
              }
            ],
            "Index": 0
          },
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "S",
                "TypeId": 80
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "Reason"
        ],
        "TypeParams": [
          {
            "Name": "R",
            "TypeId": 79
          },
          {
            "Name": "S",
            "TypeId": 80
          }
        ],
        "TypeDef": "Variant"
      },
      "79": {
        "Variants": [
          {
            "Name": "WakeCalled",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "MessageWokenRuntimeReason"
        ],
        "TypeDef": "Variant"
      },
      "80": {
        "Variants": [
          {
            "Name": "ProgramGotInitialized",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "TimeoutHasCome",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "OutOfRent",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "MessageWokenSystemReason"
        ],
        "TypeDef": "Variant"
      },
      "81": {
        "TypeFields": [
          {
            "TypeName": "Hash",
            "TypeId": 1
          }
        ],
        "Path": [
          "gear_core",
          "ids",
          "CodeId"
        ],
        "TypeDef": "Composite"
      },
      "82": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": [
              {
                "Name": "expiration",
                "TypeName": "Option<BlockNumber>",
                "TypeId": 62
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inactive",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Reinstrumented",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "CodeChangeKind"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "83": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": [
              {
                "Name": "expiration",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inactive",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Terminated",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "ExpirationChanged",
            "TypeFields": [
              {
                "Name": "expiration",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 4
          },
          {
            "Name": "ProgramSet",
            "TypeFields": [
              {
                "Name": "expiration",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "ProgramChangeKind"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "84": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "85": {
        "TypeId": 11,
        "TypeDef": "Sequence"
      },
      "86": {
        "TypeId": 87,
        "TypeDef": "Sequence"
      },
      "87": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "88": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 89
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 90
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "89": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "90": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "91": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "92": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "## Complexity",
              "- `O(1)`"
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code.",
              "",
              "## Complexity",
              "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "## Complexity",
              "- `O(C)` where `C` length of `code`"
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 93
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 95
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 12
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "93": {
        "TypeId": 94,
        "TypeDef": "Sequence"
      },
      "94": {
        "TypeIds": [
          12,
          12
        ],
        "TypeDef": "Tuple"
      },
      "95": {
        "TypeId": 12,
        "TypeDef": "Sequence"
      },
      "96": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 97
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "97": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 98
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 98
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 98
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 98
          }
        ],
        "TypeDef": "Composite"
      },
      "98": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 99
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 99
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 99
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "99": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 8
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 8
          }
        ],
        "TypeDef": "Variant"
      },
      "100": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 101
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "101": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "102": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "103": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 90
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 90
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 104
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "104": {
        "TypeFields": [
          {
            "TypeId": 105
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 105
          }
        ],
        "TypeDef": "Composite"
      },
      "105": {
        "TypeId": 106,
        "TypeDef": "Sequence"
      },
      "106": {
        "TypeIds": [
          107,
          4
        ],
        "TypeDef": "Tuple"
      },
      "107": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "108": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "109": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "`MinimumPeriod`.",
              "",
              "The dispatch origin for this call must be `Inherent`.",
              "",
              "## Complexity",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "110": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 114
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 111
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "111": {
        "TypeIds": [
          112,
          10
        ],
        "TypeDef": "Tuple"
      },
      "112": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 113
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "113": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "114": {
        "TypeId": 111,
        "TypeDef": "Sequence"
      },
      "115": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "116": {
        "Variants": [
          {
            "Name": "V1",
            "TypeFields": [
              {
                "Name": "c",
                "TypeName": "(u64, u64)",
                "TypeId": 117
              },
              {
                "Name": "allowed_slots",
                "TypeName": "AllowedSlots",
                "TypeId": 118
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "NextConfigDescriptor"
        ],
        "TypeDef": "Variant"
      },
      "117": {
        "TypeIds": [
          10,
          10
        ],
        "TypeDef": "Tuple"
      },
      "118": {
        "Variants": [
          {
            "Name": "PrimarySlots",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PrimaryAndSecondaryPlainSlots",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "PrimaryAndSecondaryVRFSlots",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "AllowedSlots"
        ],
        "TypeDef": "Variant"
      },
      "119": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 120
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "120": {
        "TypeId": 1,
        "TypeDef": "Sequence"
      },
      "121": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 122
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 122
          }
        ],
        "TypeDef": "Variant"
      },
      "122": {
        "Variants": [
          {
            "Name": "Primary",
            "TypeFields": [
              {
                "TypeName": "PrimaryPreDigest",
                "TypeId": 123
              }
            ],
            "Index": 1
          },
          {
            "Name": "SecondaryPlain",
            "TypeFields": [
              {
                "TypeName": "SecondaryPlainPreDigest",
                "TypeId": 125
              }
            ],
            "Index": 2
          },
          {
            "Name": "SecondaryVRF",
            "TypeFields": [
              {
                "TypeName": "SecondaryVRFPreDigest",
                "TypeId": 126
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "PreDigest"
        ],
        "TypeDef": "Variant"
      },
      "123": {
        "TypeFields": [
          {
            "Name": "authority_index",
            "TypeName": "super::AuthorityIndex",
            "TypeId": 4
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 115
          },
          {
            "Name": "vrf_output",
            "TypeName": "VRFOutput",
            "TypeId": 1
          },
          {
            "Name": "vrf_proof",
            "TypeName": "VRFProof",
            "TypeId": 124
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "PrimaryPreDigest"
        ],
        "TypeDef": "Composite"
      },
      "124": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "125": {
        "TypeFields": [
          {
            "Name": "authority_index",
            "TypeName": "super::AuthorityIndex",
            "TypeId": 4
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 115
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "SecondaryPlainPreDigest"
        ],
        "TypeDef": "Composite"
      },
      "126": {
        "TypeFields": [
          {
            "Name": "authority_index",
            "TypeName": "super::AuthorityIndex",
            "TypeId": 4
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 115
          },
          {
            "Name": "vrf_output",
            "TypeName": "VRFOutput",
            "TypeId": 1
          },
          {
            "Name": "vrf_proof",
            "TypeName": "VRFProof",
            "TypeId": 124
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "SecondaryVRFPreDigest"
        ],
        "TypeDef": "Composite"
      },
      "127": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "128": {
        "TypeFields": [
          {
            "Name": "c",
            "TypeName": "(u64, u64)",
            "TypeId": 117
          },
          {
            "Name": "allowed_slots",
            "TypeName": "AllowedSlots",
            "TypeId": 118
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "BabeEpochConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "129": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 131
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 130
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "130": {
        "TypeIds": [
          10,
          4
        ],
        "TypeDef": "Tuple"
      },
      "131": {
        "TypeId": 130,
        "TypeDef": "Sequence"
      },
      "132": {
        "Variants": [
          {
            "Name": "report_equivocation",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Header>>",
                "TypeId": 133
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 136
              }
            ],
            "Index": 0,
            "Docs": [
              "Report authority equivocation/misbehavior. This method will verify",
              "the equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence will",
              "be reported."
            ]
          },
          {
            "Name": "report_equivocation_unsigned",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Header>>",
                "TypeId": 133
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 136
              }
            ],
            "Index": 1,
            "Docs": [
              "Report authority equivocation/misbehavior. This method will verify",
              "the equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence will",
              "be reported.",
              "This extrinsic must be called unsigned and it is expected that only",
              "block authors will call it (validated in `ValidateUnsigned`), as such",
              "if the block author is defined it will be defined as the equivocation",
              "reporter."
            ]
          },
          {
            "Name": "plan_config_change",
            "TypeFields": [
              {
                "Name": "config",
                "TypeName": "NextConfigDescriptor",
                "TypeId": 116
              }
            ],
            "Index": 2,
            "Docs": [
              "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
              "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
              "Multiple calls to this method will replace any existing planned config change that had",
              "not been enacted yet."
            ]
          }
        ],
        "Path": [
          "pallet_babe",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "133": {
        "TypeFields": [
          {
            "Name": "offender",
            "TypeName": "Id",
            "TypeId": 112
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 115
          },
          {
            "Name": "first_header",
            "TypeName": "Header",
            "TypeId": 134
          },
          {
            "Name": "second_header",
            "TypeName": "Header",
            "TypeId": 134
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "EquivocationProof"
        ],
        "TypeParams": [
          {
            "Name": "Header",
            "TypeId": 134
          },
          {
            "Name": "Id",
            "TypeId": 112
          }
        ],
        "TypeDef": "Composite"
      },
      "134": {
        "TypeFields": [
          {
            "Name": "parent_hash",
            "TypeName": "Hash::Output",
            "TypeId": 11
          },
          {
            "Name": "number",
            "TypeName": "Number",
            "TypeId": 89
          },
          {
            "Name": "state_root",
            "TypeName": "Hash::Output",
            "TypeId": 11
          },
          {
            "Name": "extrinsics_root",
            "TypeName": "Hash::Output",
            "TypeId": 11
          },
          {
            "Name": "digest",
            "TypeName": "Digest",
            "TypeId": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "header",
          "Header"
        ],
        "TypeParams": [
          {
            "Name": "Number",
            "TypeId": 4
          },
          {
            "Name": "Hash",
            "TypeId": 135
          }
        ],
        "TypeDef": "Composite"
      },
      "135": {
        "Path": [
          "sp_runtime",
          "traits",
          "BlakeTwo256"
        ],
        "TypeDef": "Composite"
      },
      "136": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "137": {
        "Variants": [
          {
            "Name": "InvalidEquivocationProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "InvalidKeyOwnershipProof",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "DuplicateOffenceReport",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "A given equivocation report is valid but already previously reported."
            ]
          },
          {
            "Name": "InvalidConfiguration",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Submitted configuration is invalid."
            ]
          }
        ],
        "Path": [
          "pallet_babe",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "138": {
        "Variants": [
          {
            "Name": "Live",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PendingPause",
            "TypeFields": [
              {
                "Name": "scheduled_at",
                "TypeName": "N",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "N",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "PendingResume",
            "TypeFields": [
              {
                "Name": "scheduled_at",
                "TypeName": "N",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "N",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_grandpa",
          "StoredState"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "139": {
        "TypeFields": [
          {
            "Name": "scheduled_at",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "delay",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "next_authorities",
            "TypeName": "BoundedAuthorityList<Limit>",
            "TypeId": 140
          },
          {
            "Name": "forced",
            "TypeName": "Option<N>",
            "TypeId": 62
          }
        ],
        "Path": [
          "pallet_grandpa",
          "StoredPendingChange"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          },
          {
            "Name": "Limit"
          }
        ],
        "TypeDef": "Composite"
      },
      "140": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 30
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 31
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "141": {
        "Variants": [
          {
            "Name": "report_equivocation",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                "TypeId": 142
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 136
              }
            ],
            "Index": 0,
            "Docs": [
              "Report voter equivocation/misbehavior. This method will verify the",
              "equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence",
              "will be reported."
            ]
          },
          {
            "Name": "report_equivocation_unsigned",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                "TypeId": 142
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 136
              }
            ],
            "Index": 1,
            "Docs": [
              "Report voter equivocation/misbehavior. This method will verify the",
              "equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence",
              "will be reported.",
              "",
              "This extrinsic must be called unsigned and it is expected that only",
              "block authors will call it (validated in `ValidateUnsigned`), as such",
              "if the block author is defined it will be defined as the equivocation",
              "reporter."
            ]
          },
          {
            "Name": "note_stalled",
            "TypeFields": [
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "best_finalized_block_number",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Note that the current authority set of the GRANDPA finality gadget has stalled.",
              "",
              "This will trigger a forced authority set change at the beginning of the next session, to",
              "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
              "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
              "The block production rate (which may be slowed down because of finality lagging) should",
              "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
              "authority will start voting on top of `best_finalized_block_number` for new finalized",
              "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
              "block of all validators of the new authority set.",
              "",
              "Only callable by root."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "142": {
        "TypeFields": [
          {
            "Name": "set_id",
            "TypeName": "SetId",
            "TypeId": 10
          },
          {
            "Name": "equivocation",
            "TypeName": "Equivocation<H, N>",
            "TypeId": 143
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "EquivocationProof"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 11
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "143": {
        "Variants": [
          {
            "Name": "Prevote",
            "TypeFields": [
              {
                "TypeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                "TypeId": 144
              }
            ],
            "Index": 0
          },
          {
            "Name": "Precommit",
            "TypeFields": [
              {
                "TypeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                "TypeId": 149
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 11
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "144": {
        "TypeFields": [
          {
            "Name": "round_number",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "identity",
            "TypeName": "Id",
            "TypeId": 32
          },
          {
            "Name": "first",
            "TypeName": "(V, S)",
            "TypeId": 148
          },
          {
            "Name": "second",
            "TypeName": "(V, S)",
            "TypeId": 148
          }
        ],
        "Path": [
          "finality_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 32
          },
          {
            "Name": "V",
            "TypeId": 145
          },
          {
            "Name": "S",
            "TypeId": 146
          }
        ],
        "TypeDef": "Composite"
      },
      "145": {
        "TypeFields": [
          {
            "Name": "target_hash",
            "TypeName": "H",
            "TypeId": 11
          },
          {
            "Name": "target_number",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "finality_grandpa",
          "Prevote"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 11
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "146": {
        "TypeFields": [
          {
            "TypeName": "ed25519::Signature",
            "TypeId": 147
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "app",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "147": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 124
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "148": {
        "TypeIds": [
          145,
          146
        ],
        "TypeDef": "Tuple"
      },
      "149": {
        "TypeFields": [
          {
            "Name": "round_number",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "identity",
            "TypeName": "Id",
            "TypeId": 32
          },
          {
            "Name": "first",
            "TypeName": "(V, S)",
            "TypeId": 151
          },
          {
            "Name": "second",
            "TypeName": "(V, S)",
            "TypeId": 151
          }
        ],
        "Path": [
          "finality_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 32
          },
          {
            "Name": "V",
            "TypeId": 150
          },
          {
            "Name": "S",
            "TypeId": 146
          }
        ],
        "TypeDef": "Composite"
      },
      "150": {
        "TypeFields": [
          {
            "Name": "target_hash",
            "TypeName": "H",
            "TypeId": 11
          },
          {
            "Name": "target_number",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "finality_grandpa",
          "Precommit"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 11
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "151": {
        "TypeIds": [
          150,
          146
        ],
        "TypeDef": "Tuple"
      },
      "152": {
        "Variants": [
          {
            "Name": "PauseFailed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to signal GRANDPA pause when the authority set isn't live",
              "(either paused or already pending pause)."
            ]
          },
          {
            "Name": "ResumeFailed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Attempt to signal GRANDPA resume when the authority set isn't paused",
              "(either live or already pending resume)."
            ]
          },
          {
            "Name": "ChangePending",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Attempt to signal GRANDPA change with one already pending."
            ]
          },
          {
            "Name": "TooSoon",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Cannot signal forced change so soon after last."
            ]
          },
          {
            "Name": "InvalidKeyOwnershipProof",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "InvalidEquivocationProof",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "DuplicateOffenceReport",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "A given equivocation report is valid but already previously reported."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "153": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 156
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 154
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "154": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 107
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 155
          }
        ],
        "Path": [
          "pallet_balances",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "155": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "156": {
        "TypeId": 154,
        "TypeDef": "Sequence"
      },
      "157": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 159
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 158
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "158": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 107
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 107
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "159": {
        "TypeId": 158,
        "TypeDef": "Sequence"
      },
      "160": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 56
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor.",
              "",
              "## Complexity",
              "- Dependent on arguments but not critical, given proper implementations for input config",
              "  types. See related functions below.",
              "- It contains a limited number of reads and writes internally and no complex",
              "  computation.",
              "",
              "Related functions:",
              "",
              "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
              "  - Transferring balances to accounts that did not exist before will cause",
              "    `T::OnNewAccount::on_new_account` to be called.",
              "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
              "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
              "    that the transfer will not kill the origin account."
            ]
          },
          {
            "Name": "set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 56
              },
              {
                "Name": "new_reserved",
                "TypeName": "T::Balance",
                "TypeId": 56
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the balances of a given account.",
              "",
              "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
              "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
              "If the new free or reserved balance is below the existential deposit,",
              "it will reset the account nonce (`frame_system::AccountNonce`).",
              "",
              "The dispatch origin for this call is `root`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 56
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer`, except the origin must be root and the source account may be",
              "specified.",
              "## Complexity",
              "- Same as transfer, but additional read and write because the source account is not",
              "  assumed to be in the overlay."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 56
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
              "origin account.",
              "",
              "99% of the time you want [`transfer`] instead.",
              "",
              "[`transfer`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 91
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true). ## Complexity",
              "- O(1). Just like transfer, but reading the user's transferable balance first."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "161": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 162
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 163
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 40
          }
        ],
        "TypeDef": "Variant"
      },
      "162": {
        "TypeId": 40,
        "TypeDef": "Compact"
      },
      "163": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "164": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal"
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit"
            ]
          },
          {
            "Name": "KeepAlive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account"
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account"
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed MaxReserves"
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "165": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "166": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "167": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "168": {
        "TypeId": 169,
        "TypeDef": "Sequence"
      },
      "169": {
        "TypeIds": [
          0,
          170
        ],
        "TypeDef": "Tuple"
      },
      "170": {
        "TypeFields": [
          {
            "Name": "babe",
            "TypeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 112
          },
          {
            "Name": "grandpa",
            "TypeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 32
          }
        ],
        "Path": [
          "gear_runtime",
          "SessionKeys"
        ],
        "TypeDef": "Composite"
      },
      "171": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "172": {
        "TypeIds": [
          173,
          12
        ],
        "TypeDef": "Tuple"
      },
      "173": {
        "TypeFields": [
          {
            "TypeName": "[u8; 4]",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "KeyTypeId"
        ],
        "TypeDef": "Composite"
      },
      "174": {
        "Variants": [
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 170
              },
              {
                "Name": "proof",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the session key(s) of the function caller to `keys`.",
              "Allows an account to set its session key prior to becoming a validator.",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be signed.",
              "",
              "## Complexity",
              "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
              "  fixed."
            ]
          },
          {
            "Name": "purge_keys",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Removes any session key(s) of the function caller.",
              "",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be Signed and the account must be either be",
              "convertible to a validator ID using the chain's typical addressing system (this usually",
              "means being a controller account) or directly convertible into a validator ID (which",
              "usually means being a stash account).",
              "",
              "## Complexity",
              "- `O(1)` in number of key types. Actual cost depends on the number of length of",
              "  `T::Keys::key_ids()` which is fixed."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "175": {
        "Variants": [
          {
            "Name": "InvalidProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ownership proof."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No associated validator ID for account."
            ]
          },
          {
            "Name": "DuplicatedKey",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Registered duplicate key."
            ]
          },
          {
            "Name": "NoKeys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No keys are associated with this account."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the session pallet."
        ]
      },
      "176": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 0,
            "Docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched.",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 43
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 178
              }
            ],
            "Index": 1,
            "Docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 2,
            "Docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 186
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 178
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 178
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "177": {
        "TypeId": 178,
        "TypeDef": "Sequence"
      },
      "178": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 92
              }
            ],
            "Index": 0
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 109
              }
            ],
            "Index": 1
          },
          {
            "Name": "Babe",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                "TypeId": 132
              }
            ],
            "Index": 3
          },
          {
            "Name": "Grandpa",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                "TypeId": 141
              }
            ],
            "Index": 4
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 160
              }
            ],
            "Index": 5
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                "TypeId": 174
              }
            ],
            "Index": 7
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 176
              }
            ],
            "Index": 8
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 179
              }
            ],
            "Index": 9
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 181
              }
            ],
            "Index": 10
          },
          {
            "Name": "ValidatorSet",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ValidatorSet, Runtime>",
                "TypeId": 183
              }
            ],
            "Index": 98
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                "TypeId": 184
              }
            ],
            "Index": 99
          },
          {
            "Name": "Gear",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Gear, Runtime>",
                "TypeId": 185
              }
            ],
            "Index": 104
          }
        ],
        "Path": [
          "gear_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "179": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 180
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 178
              }
            ],
            "Index": 0,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorised for through",
              "`add_proxy`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 42
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Register a proxy account for the sender that is able to make calls on its behalf.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to make a proxy.",
              "- `proxy_type`: The permissions allowed for this proxy account.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 42
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Unregister a proxy account for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to remove as a proxy.",
              "- `proxy_type`: The permissions currently enabled for the removed proxy account."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Unregister all proxy accounts for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "WARNING: This may be called on accounts created by `pure`, however if done, then",
              "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 42
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 43
              }
            ],
            "Index": 4,
            "Docs": [
              "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
              "initialize it with a proxy of `proxy_type` for `origin` sender.",
              "",
              "Requires a `Signed` origin.",
              "",
              "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
              "new account. This will almost always be the most permissive `ProxyType` possible to",
              "allow for maximum flexibility.",
              "- `index`: A disambiguation index, in case this is called multiple times in the same",
              "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
              "want to use `0`.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero.",
              "",
              "Fails with `Duplicate` if this has already been called in this transaction, from the",
              "same sender, with the same parameters.",
              "",
              "Fails if there are insufficient funds to pay for deposit."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 42
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 43
              },
              {
                "Name": "height",
                "TypeName": "T::BlockNumber",
                "TypeId": 89
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 89
              }
            ],
            "Index": 5,
            "Docs": [
              "Removes a previously spawned pure proxy.",
              "",
              "WARNING: **All access to this account will be lost.** Any funds held in it will be",
              "inaccessible.",
              "",
              "Requires a `Signed` origin, and the sender account must have been created by a call to",
              "`pure` with corresponding parameters.",
              "",
              "- `spawner`: The account that originally called `pure` to create this account.",
              "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
              "- `proxy_type`: The proxy type originally passed to `pure`.",
              "- `height`: The height of the chain when the call to `pure` was processed.",
              "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
              "",
              "Fails with `NoPermission` in case the caller is not a previously created pure",
              "account whose `pure` call has corresponding parameters."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 6,
            "Docs": [
              "Publish the hash of a proxy-call that will be made in the future.",
              "",
              "This must be called some number of blocks before the corresponding `proxy` is attempted",
              "if the delay associated with the proxy relationship is greater than zero.",
              "",
              "No more than `MaxPending` announcements may be made at any one time.",
              "",
              "This will take a deposit of `AnnouncementDepositFactor` as well as",
              "`AnnouncementDepositBase` if there are no other pending announcements.",
              "",
              "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 7,
            "Docs": [
              "Remove a given announcement.",
              "",
              "May be called by a proxy account to remove a call they previously announced and return",
              "the deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 8,
            "Docs": [
              "Remove the given announcement of a delegate.",
              "",
              "May be called by a target (proxied) account to remove a call that one of their delegates",
              "(`delegate`) has announced they want to execute. The deposit is returned.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `delegate`: The account that previously announced the call.",
              "- `call_hash`: The hash of the call to be made."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 180
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 178
              }
            ],
            "Index": 9,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorized for through",
              "`add_proxy`.",
              "",
              "Removes any corresponding announcement(s).",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "180": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 42
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 42
          }
        ],
        "TypeDef": "Variant"
      },
      "181": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 167
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 178
              }
            ],
            "Index": 0,
            "Docs": [
              "Immediately dispatch a multi-signature call using a single approval from the caller.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `other_signatories`: The accounts (other than the sender) who are part of the",
              "multi-signature, but do not participate in the approval process.",
              "- `call`: The call to be executed.",
              "",
              "Result is equivalent to the dispatched result.",
              "",
              "## Complexity",
              "O(Z + C) where Z is the length of the call and C its execution weight."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 43
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 167
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<T::BlockNumber>>",
                "TypeId": 182
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 178
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "If there are enough, then dispatch the call.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call`: The call to be executed.",
              "",
              "NOTE: Unless this is the final approval, you will generally want to use",
              "`approve_as_multi` instead, since it only requires a hash of the call.",
              "",
              "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
              "on success, result is `Ok` and the result from the interior call, if it was executed,",
              "may be found in the deposited `MultisigExecuted` event.",
              "",
              "## Complexity",
              "- `O(S + Z + Call)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- The weight of the `call`.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 43
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 167
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<T::BlockNumber>>",
                "TypeId": 182
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 2,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 43
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 167
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 45
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
              "for this operation will be unreserved on success.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
              "transaction for this dispatch.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- One event.",
              "- I/O: 1 read `O(S)`, one remove.",
              "- Storage: removes one item."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "182": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 45
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 45
          }
        ],
        "TypeDef": "Variant"
      },
      "183": {
        "Variants": [
          {
            "Name": "add_validator",
            "TypeFields": [
              {
                "Name": "validator_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a new validator.",
              "",
              "New validator's session keys should be set in Session pallet before",
              "calling this.",
              "",
              "The origin can be configured using the `AddRemoveOrigin` type in the",
              "host runtime. Can also be set to sudo/root."
            ]
          },
          {
            "Name": "remove_validator",
            "TypeFields": [
              {
                "Name": "validator_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a validator.",
              "",
              "The origin can be configured using the `AddRemoveOrigin` type in the",
              "host runtime. Can also be set to sudo/root."
            ]
          },
          {
            "Name": "add_validator_again",
            "TypeFields": [
              {
                "Name": "validator_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Add an approved validator again when it comes back online.",
              "",
              "For this call, the dispatch origin must be the validator itself."
            ]
          }
        ],
        "Path": [
          "substrate_validator_set",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "184": {
        "Variants": [
          {
            "Name": "sudo",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 178
              }
            ],
            "Index": 0,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "sudo_unchecked_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 178
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "This function does not check the weight of the call, and instead allows the",
              "Sudo user to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "set_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              }
            ],
            "Index": 2,
            "Docs": [
              "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
              "key.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "sudo_as",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 161
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 178
              }
            ],
            "Index": 3,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
              "a given account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "185": {
        "Variants": [
          {
            "Name": "upload_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Saves program `code` in storage.",
              "",
              "The extrinsic was created to provide _deploy program from program_ functionality.",
              "Anyone who wants to define a \"factory\" logic in program should first store the code and metadata for the \"child\"",
              "program in storage. So the code for the child will be initialized by program initialization request only if it exists in storage.",
              "",
              "More precisely, the code and its metadata are actually saved in the storage under the hash of the `code`. The code hash is computed",
              "as Blake256 hash. At the time of the call the `code` hash should not be in the storage. If it was stored previously, call will end up",
              "with an `CodeAlreadyExists` error. In this case user can be sure, that he can actually use the hash of his program's code bytes to define",
              "\"program factory\" logic in his program.",
              "",
              "Parameters",
              "- `code`: wasm code of a program as a byte vector.",
              "",
              "Emits the following events:",
              "- `SavedCode(H256)` - when the code is saved in storage."
            ]
          },
          {
            "Name": "upload_program",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "init_payload",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Creates program initialization request (message), that is scheduled to be run in the same block.",
              "",
              "There are no guarantees that initialization message will be run in the same block due to block",
              "gas limit restrictions. For example, when it will be the message's turn, required gas limit for it",
              "could be more than remaining block gas limit. Therefore, the message processing will be postponed",
              "until the next block.",
              "",
              "`ProgramId` is computed as Blake256 hash of concatenated bytes of `code` + `salt`. (todo #512 `code_hash` + `salt`)",
              "Such `ProgramId` must not exist in the Program Storage at the time of this call.",
              "",
              "There is the same guarantee here as in `upload_code`. That is, future program's",
              "`code` and metadata are stored before message was added to the queue and processed.",
              "",
              "The origin must be Signed and the sender must have sufficient funds to pay",
              "for `gas` and `value` (in case the latter is being transferred).",
              "",
              "Parameters:",
              "- `code`: wasm code of a program as a byte vector.",
              "- `salt`: randomness term (a seed) to allow programs with identical code",
              "  to be created independently.",
              "- `init_payload`: encoded parameters of the wasm module `init` function.",
              "- `gas_limit`: maximum amount of gas the program can spend before it is halted.",
              "- `value`: balance to be transferred to the program once it's been created.",
              "",
              "Emits the following events:",
              "- `InitMessageEnqueued(MessageInfo)` when init message is placed in the queue.",
              "",
              "# Note",
              "Faulty (uninitialized) programs still have a valid addresses (program ids) that can deterministically be derived on the",
              "caller's side upfront. It means that if messages are sent to such an address, they might still linger in the queue.",
              "",
              "In order to mitigate the risk of users' funds being sent to an address,",
              "where a valid program should have resided, while it's not,",
              "such \"failed-to-initialize\" programs are not silently deleted from the",
              "program storage but rather marked as \"ghost\" programs.",
              "Ghost program can be removed by their original author via an explicit call.",
              "The funds stored by a ghost program will be release to the author once the program",
              "has been removed."
            ]
          },
          {
            "Name": "create_program",
            "TypeFields": [
              {
                "Name": "code_id",
                "TypeName": "CodeId",
                "TypeId": 81
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "init_payload",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Creates program via `code_id` from storage.",
              "",
              "Parameters:",
              "- `code_id`: wasm code id in the code storage.",
              "- `salt`: randomness term (a seed) to allow programs with identical code",
              "  to be created independently.",
              "- `init_payload`: encoded parameters of the wasm module `init` function.",
              "- `gas_limit`: maximum amount of gas the program can spend before it is halted.",
              "- `value`: balance to be transferred to the program once it's been created.",
              "",
              "Emits the following events:",
              "- `InitMessageEnqueued(MessageInfo)` when init message is placed in the queue.",
              "",
              "# NOTE",
              "",
              "For the details of this extrinsic, see `upload_code`."
            ]
          },
          {
            "Name": "send_message",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "ProgramId",
                "TypeId": 51
              },
              {
                "Name": "payload",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Sends a message to a program or to another account.",
              "",
              "The origin must be Signed and the sender must have sufficient funds to pay",
              "for `gas` and `value` (in case the latter is being transferred).",
              "",
              "To avoid an undefined behavior a check is made that the destination address",
              "is not a program in uninitialized state. If the opposite holds true,",
              "the message is not enqueued for processing.",
              "",
              "Parameters:",
              "- `destination`: the message destination.",
              "- `payload`: in case of a program destination, parameters of the `handle` function.",
              "- `gas_limit`: maximum amount of gas the program can spend before it is halted.",
              "- `value`: balance to be transferred to the program once it's been created.",
              "",
              "Emits the following events:",
              "- `DispatchMessageEnqueued(MessageInfo)` when dispatch message is placed in the queue."
            ]
          },
          {
            "Name": "send_reply",
            "TypeFields": [
              {
                "Name": "reply_to_id",
                "TypeName": "MessageId",
                "TypeId": 50
              },
              {
                "Name": "payload",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Send reply on message in `Mailbox`.",
              "",
              "Removes message by given `MessageId` from callers `Mailbox`:",
              "rent funds become free, associated with the message value",
              "transfers from message sender to extrinsic caller.",
              "",
              "Generates reply on removed message with given parameters",
              "and pushes it in `MessageQueue`.",
              "",
              "NOTE: source of the message in mailbox guaranteed to be a program.",
              "",
              "NOTE: only user who is destination of the message, can claim value",
              "or reply on the message from mailbox."
            ]
          },
          {
            "Name": "claim_value",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 50
              }
            ],
            "Index": 5,
            "Docs": [
              "Claim value from message in `Mailbox`.",
              "",
              "Removes message by given `MessageId` from callers `Mailbox`:",
              "rent funds become free, associated with the message value",
              "transfers from message sender to extrinsic caller.",
              "",
              "NOTE: only user who is destination of the message, can claim value",
              "or reply on the message from mailbox."
            ]
          },
          {
            "Name": "run",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Process message queue"
            ]
          },
          {
            "Name": "set_execute_inherent",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "bool",
                "TypeId": 91
              }
            ],
            "Index": 7,
            "Docs": [
              "Sets `ExecuteInherent` flag.",
              "",
              "Requires root origin (eventually, will only be set via referendum)"
            ]
          },
          {
            "Name": "pay_program_rent",
            "TypeFields": [
              {
                "Name": "program_id",
                "TypeName": "ProgramId",
                "TypeId": 51
              },
              {
                "Name": "block_count",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Pay additional rent for the program."
            ]
          }
        ],
        "Path": [
          "pallet_gear",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "186": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 187
              }
            ],
            "Index": 0
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                "TypeId": 136
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "187": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "188": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "189": {
        "TypeIds": [
          190,
          6
        ],
        "TypeDef": "Tuple"
      },
      "190": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 192
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 191
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "191": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 42
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 42
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "192": {
        "TypeId": 191,
        "TypeDef": "Sequence"
      },
      "193": {
        "TypeIds": [
          194,
          6
        ],
        "TypeDef": "Tuple"
      },
      "194": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 196
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 195
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "195": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 11
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 11
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "196": {
        "TypeId": 195,
        "TypeDef": "Sequence"
      },
      "197": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "198": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "199": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 45
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 200
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "200": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 167
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "201": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "202": {
        "Variants": [
          {
            "Name": "TooLowValidatorCount",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Target (post-removal) validator count is below the minimum."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Validator is already in the validator set."
            ]
          },
          {
            "Name": "ValidatorNotApproved",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Validator is not approved for re-addition."
            ]
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Only the validator can add itself back after coming online."
            ]
          }
        ],
        "Path": [
          "substrate_validator_set",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "203": {
        "Variants": [
          {
            "Name": "RequireSudo",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sender must be the Sudo account"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the Sudo pallet"
        ]
      },
      "204": {
        "TypeFields": [
          {
            "Name": "code",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          },
          {
            "Name": "original_code_len",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "exports",
            "TypeName": "BTreeSet<DispatchKind>",
            "TypeId": 205
          },
          {
            "Name": "static_pages",
            "TypeName": "WasmPage",
            "TypeId": 208
          },
          {
            "Name": "version",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "code",
          "InstrumentedCode"
        ],
        "TypeDef": "Composite"
      },
      "205": {
        "TypeFields": [
          {
            "TypeId": 207
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 206
          }
        ],
        "TypeDef": "Composite"
      },
      "206": {
        "Variants": [
          {
            "Name": "Init",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Handle",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Reply",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Signal",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "DispatchKind"
        ],
        "TypeDef": "Variant"
      },
      "207": {
        "TypeId": 206,
        "TypeDef": "Sequence"
      },
      "208": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "memory",
          "WasmPage"
        ],
        "TypeDef": "Composite"
      },
      "209": {
        "TypeFields": [
          {
            "Name": "author",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "block_number",
            "TypeName": "u32",
            "TypeId": 89
          }
        ],
        "Path": [
          "gear_common",
          "CodeMetadata"
        ],
        "TypeDef": "Composite"
      },
      "210": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": [
              {
                "TypeName": "ActiveProgram<BlockNumber>",
                "TypeId": 211
              }
            ],
            "Index": 0
          },
          {
            "Name": "Exited",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 51
              }
            ],
            "Index": 1
          },
          {
            "Name": "Terminated",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 51
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "gear_common",
          "Program"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "211": {
        "TypeFields": [
          {
            "Name": "allocations",
            "TypeName": "BTreeSet<WasmPage>",
            "TypeId": 212
          },
          {
            "Name": "pages_with_data",
            "TypeName": "BTreeSet<GearPage>",
            "TypeId": 214
          },
          {
            "Name": "gas_reservation_map",
            "TypeName": "GasReservationMap",
            "TypeId": 217
          },
          {
            "Name": "code_hash",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "code_exports",
            "TypeName": "BTreeSet<DispatchKind>",
            "TypeId": 205
          },
          {
            "Name": "static_pages",
            "TypeName": "WasmPage",
            "TypeId": 208
          },
          {
            "Name": "state",
            "TypeName": "ProgramState",
            "TypeId": 221
          },
          {
            "Name": "expiration_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_common",
          "ActiveProgram"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "212": {
        "TypeFields": [
          {
            "TypeId": 213
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 208
          }
        ],
        "TypeDef": "Composite"
      },
      "213": {
        "TypeId": 208,
        "TypeDef": "Sequence"
      },
      "214": {
        "TypeFields": [
          {
            "TypeId": 216
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 215
          }
        ],
        "TypeDef": "Composite"
      },
      "215": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "memory",
          "GearPage"
        ],
        "TypeDef": "Composite"
      },
      "216": {
        "TypeId": 215,
        "TypeDef": "Sequence"
      },
      "217": {
        "TypeFields": [
          {
            "TypeId": 219
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 74
          },
          {
            "Name": "V",
            "TypeId": 218
          }
        ],
        "TypeDef": "Composite"
      },
      "218": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "start",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "finish",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "reservation",
          "GasReservationSlot"
        ],
        "TypeDef": "Composite"
      },
      "219": {
        "TypeId": 220,
        "TypeDef": "Sequence"
      },
      "220": {
        "TypeIds": [
          74,
          218
        ],
        "TypeDef": "Tuple"
      },
      "221": {
        "Variants": [
          {
            "Name": "Uninitialized",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 50
              }
            ],
            "Index": 0
          },
          {
            "Name": "Initialized",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "ProgramState"
        ],
        "TypeDef": "Variant"
      },
      "222": {
        "TypeIds": [
          51,
          215
        ],
        "TypeDef": "Tuple"
      },
      "223": {
        "TypeFields": [
          {
            "TypeName": "PageBufInner",
            "TypeId": 224
          }
        ],
        "Path": [
          "gear_core",
          "memory",
          "PageBuf"
        ],
        "TypeDef": "Composite"
      },
      "224": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "gear_core",
          "buffer",
          "LimitedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "E",
            "TypeId": 40
          }
        ],
        "TypeDef": "Composite"
      },
      "225": {
        "TypeId": 50,
        "TypeDef": "Sequence"
      },
      "226": {
        "TypeIds": [
          4,
          11
        ],
        "TypeDef": "Tuple"
      },
      "227": {
        "Variants": [
          {
            "Name": "DuplicateItem",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ItemNotFound",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotActiveProgram",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotFindDataForPage",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_gear_program",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "228": {
        "TypeFields": [
          {
            "Name": "next",
            "TypeName": "Option<K>",
            "TypeId": 238
          },
          {
            "Name": "value",
            "TypeName": "V",
            "TypeId": 229
          }
        ],
        "Path": [
          "gear_common",
          "storage",
          "complicated",
          "dequeue",
          "LinkedNode"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 50
          },
          {
            "Name": "V",
            "TypeId": 229
          }
        ],
        "TypeDef": "Composite"
      },
      "229": {
        "TypeFields": [
          {
            "Name": "kind",
            "TypeName": "DispatchKind",
            "TypeId": 206
          },
          {
            "Name": "message",
            "TypeName": "StoredMessage",
            "TypeId": 53
          },
          {
            "Name": "context",
            "TypeName": "Option<ContextStore>",
            "TypeId": 230
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "stored",
          "StoredDispatch"
        ],
        "TypeDef": "Composite"
      },
      "230": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 231
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 231
          }
        ],
        "TypeDef": "Variant"
      },
      "231": {
        "TypeFields": [
          {
            "Name": "outgoing",
            "TypeName": "BTreeMap<u32, Option<Payload>>",
            "TypeId": 232
          },
          {
            "Name": "reply",
            "TypeName": "Option<Payload>",
            "TypeId": 233
          },
          {
            "Name": "initialized",
            "TypeName": "BTreeSet<ProgramId>",
            "TypeId": 70
          },
          {
            "Name": "awaken",
            "TypeName": "BTreeSet<MessageId>",
            "TypeId": 236
          },
          {
            "Name": "reply_sent",
            "TypeName": "bool",
            "TypeId": 91
          },
          {
            "Name": "reservation_nonce",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "system_reservation",
            "TypeName": "Option<u64>",
            "TypeId": 237
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "context",
          "ContextStore"
        ],
        "TypeDef": "Composite"
      },
      "232": {
        "TypeFields": [
          {
            "TypeId": 234
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 233
          }
        ],
        "TypeDef": "Composite"
      },
      "233": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 54
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 54
          }
        ],
        "TypeDef": "Variant"
      },
      "234": {
        "TypeId": 235,
        "TypeDef": "Sequence"
      },
      "235": {
        "TypeIds": [
          4,
          233
        ],
        "TypeDef": "Tuple"
      },
      "236": {
        "TypeFields": [
          {
            "TypeId": 225
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 50
          }
        ],
        "TypeDef": "Composite"
      },
      "237": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Variant"
      },
      "238": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 50
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 50
          }
        ],
        "TypeDef": "Variant"
      },
      "239": {
        "TypeIds": [
          0,
          50
        ],
        "TypeDef": "Tuple"
      },
      "240": {
        "TypeIds": [
          53,
          241
        ],
        "TypeDef": "Tuple"
      },
      "241": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "finish",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_common",
          "storage",
          "primitives",
          "Interval"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "242": {
        "TypeIds": [
          51,
          50
        ],
        "TypeDef": "Tuple"
      },
      "243": {
        "TypeIds": [
          229,
          241
        ],
        "TypeDef": "Tuple"
      },
      "244": {
        "Variants": [
          {
            "Name": "QueueDuplicateKey",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Occurs when given key already exists in queue."
            ]
          },
          {
            "Name": "QueueElementNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Occurs when queue's element wasn't found in storage."
            ]
          },
          {
            "Name": "QueueHeadShouldBeSet",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Occurs when queue's head should contain value,",
              "but it's empty for some reason."
            ]
          },
          {
            "Name": "QueueHeadShouldNotBeSet",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Occurs when queue's head should be empty,",
              "but it contains value for some reason."
            ]
          },
          {
            "Name": "QueueTailHasNextKey",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Occurs when queue's tail element contains link",
              "to the next element."
            ]
          },
          {
            "Name": "QueueTailParentNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Occurs when while searching queue's pre-tail,",
              "element wasn't found."
            ]
          },
          {
            "Name": "QueueTailShouldBeSet",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Occurs when queue's tail should contain value,",
              "but it's empty for some reason."
            ]
          },
          {
            "Name": "QueueTailShouldNotBeSet",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Occurs when queue's tail should be empty,",
              "but it contains value for some reason."
            ]
          },
          {
            "Name": "MailboxDuplicateKey",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Occurs when given value already exists in mailbox."
            ]
          },
          {
            "Name": "MailboxElementNotFound",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Occurs when mailbox's element wasn't found in storage."
            ]
          },
          {
            "Name": "WaitlistDuplicateKey",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Occurs when given value already exists in waitlist."
            ]
          },
          {
            "Name": "WaitlistElementNotFound",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Occurs when waitlist's element wasn't found in storage."
            ]
          }
        ],
        "Path": [
          "pallet_gear_messenger",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "245": {
        "TypeIds": [
          4,
          246
        ],
        "TypeDef": "Tuple"
      },
      "246": {
        "Variants": [
          {
            "Name": "PauseProgram",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 51
              }
            ],
            "Index": 0
          },
          {
            "Name": "RemoveCode",
            "TypeFields": [
              {
                "TypeName": "CodeId",
                "TypeId": 81
              }
            ],
            "Index": 1
          },
          {
            "Name": "RemoveFromMailbox",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "MessageId",
                "TypeId": 50
              }
            ],
            "Index": 2
          },
          {
            "Name": "RemoveFromWaitlist",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 51
              },
              {
                "TypeName": "MessageId",
                "TypeId": 50
              }
            ],
            "Index": 3
          },
          {
            "Name": "RemovePausedProgram",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 51
              }
            ],
            "Index": 4
          },
          {
            "Name": "WakeMessage",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 51
              },
              {
                "TypeName": "MessageId",
                "TypeId": 50
              }
            ],
            "Index": 5
          },
          {
            "Name": "SendDispatch",
            "TypeFields": [
              {
                "TypeName": "MessageId",
                "TypeId": 50
              }
            ],
            "Index": 6
          },
          {
            "Name": "SendUserMessage",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 50
              },
              {
                "Name": "to_mailbox",
                "TypeName": "bool",
                "TypeId": 91
              }
            ],
            "Index": 7
          },
          {
            "Name": "RemoveGasReservation",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 51
              },
              {
                "TypeName": "ReservationId",
                "TypeId": 74
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "gear_common",
          "scheduler",
          "task",
          "ScheduledTask"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "247": {
        "Variants": [
          {
            "Name": "DuplicateTask",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Occurs when given task already exists in task pool."
            ]
          },
          {
            "Name": "TaskNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Occurs when task wasn't found in storage."
            ]
          }
        ],
        "Path": [
          "pallet_gear_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "248": {
        "Variants": [
          {
            "Name": "External",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ExternalId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "Balance",
                "TypeId": 10
              },
              {
                "Name": "lock",
                "TypeName": "NodeLock<Balance>",
                "TypeId": 249
              },
              {
                "Name": "system_reserve",
                "TypeName": "Balance",
                "TypeId": 10
              },
              {
                "Name": "refs",
                "TypeName": "ChildrenRefs",
                "TypeId": 251
              },
              {
                "Name": "consumed",
                "TypeName": "bool",
                "TypeId": 91
              }
            ],
            "Index": 0
          },
          {
            "Name": "Cut",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ExternalId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "Balance",
                "TypeId": 10
              },
              {
                "Name": "lock",
                "TypeName": "NodeLock<Balance>",
                "TypeId": 249
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ExternalId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "Balance",
                "TypeId": 10
              },
              {
                "Name": "lock",
                "TypeName": "NodeLock<Balance>",
                "TypeId": 249
              },
              {
                "Name": "refs",
                "TypeName": "ChildrenRefs",
                "TypeId": 251
              },
              {
                "Name": "consumed",
                "TypeName": "bool",
                "TypeId": 91
              }
            ],
            "Index": 2
          },
          {
            "Name": "SpecifiedLocal",
            "TypeFields": [
              {
                "Name": "parent",
                "TypeName": "Id",
                "TypeId": 73
              },
              {
                "Name": "value",
                "TypeName": "Balance",
                "TypeId": 10
              },
              {
                "Name": "lock",
                "TypeName": "NodeLock<Balance>",
                "TypeId": 249
              },
              {
                "Name": "system_reserve",
                "TypeName": "Balance",
                "TypeId": 10
              },
              {
                "Name": "refs",
                "TypeName": "ChildrenRefs",
                "TypeId": 251
              },
              {
                "Name": "consumed",
                "TypeName": "bool",
                "TypeId": 91
              }
            ],
            "Index": 3
          },
          {
            "Name": "UnspecifiedLocal",
            "TypeFields": [
              {
                "Name": "parent",
                "TypeName": "Id",
                "TypeId": 73
              },
              {
                "Name": "lock",
                "TypeName": "NodeLock<Balance>",
                "TypeId": 249
              },
              {
                "Name": "system_reserve",
                "TypeName": "Balance",
                "TypeId": 10
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "gear_common",
          "gas_provider",
          "node",
          "GasNode"
        ],
        "TypeParams": [
          {
            "Name": "ExternalId",
            "TypeId": 0
          },
          {
            "Name": "Id",
            "TypeId": 73
          },
          {
            "Name": "Balance",
            "TypeId": 10
          }
        ],
        "TypeDef": "Variant"
      },
      "249": {
        "TypeFields": [
          {
            "TypeName": "[Balance; cardinality::<LockId>()]",
            "TypeId": 250
          }
        ],
        "Path": [
          "gear_common",
          "gas_provider",
          "node",
          "NodeLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 10
          }
        ],
        "TypeDef": "Composite"
      },
      "250": {
        "Length": 4,
        "TypeId": 10,
        "TypeDef": "Array"
      },
      "251": {
        "TypeFields": [
          {
            "Name": "spec_refs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "unspec_refs",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_common",
          "gas_provider",
          "node",
          "ChildrenRefs"
        ],
        "TypeDef": "Composite"
      },
      "252": {
        "Variants": [
          {
            "Name": "Forbidden",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NodeAlreadyExists",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "NodeNotFound",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "NodeWasConsumed",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ParentIsLost",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Errors stating that gas tree has been invalidated"
            ]
          },
          {
            "Name": "ParentHasNoChildren",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "UnexpectedConsumeOutput",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Output of `Tree::consume` procedure that wasn't expected.",
              "",
              "Outputs of consumption procedure are determined. The error is returned",
              "when unexpected one occurred. That signals, that algorithm works wrong",
              "and expected invariants are not correct."
            ]
          },
          {
            "Name": "UnexpectedNodeType",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Node type that can't occur if algorithm work well"
            ]
          },
          {
            "Name": "ValueIsNotCaught",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Value must have been caught, but was missed or blocked (for more info see `ValueNode::catch_value`)."
            ]
          },
          {
            "Name": "ValueIsBlocked",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Value must have been caught or moved upstream, but was blocked (for more info see `ValueNode::catch_value`)."
            ]
          },
          {
            "Name": "ValueIsNotBlocked",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Value must have been blocked, but was either moved or caught (for more info see `ValueNode::catch_value`)."
            ]
          },
          {
            "Name": "ConsumedWithLock",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "`GasTree::consume` called on node, which has some balance locked."
            ]
          },
          {
            "Name": "ConsumedWithSystemReservation",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "`GasTree::consume` called on node, which has some system reservation."
            ]
          },
          {
            "Name": "TotalValueIsOverflowed",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "`GasTree::create` called with some value amount leading to",
              "the total value overflow."
            ]
          },
          {
            "Name": "TotalValueIsUnderflowed",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Either `GasTree::consume` or `GasTree::spent` called on a node creating",
              "negative imbalance which leads to the total value drop below 0."
            ]
          }
        ],
        "Path": [
          "pallet_gear_gas",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "253": {
        "TypeFields": [
          {
            "Name": "limits",
            "TypeName": "Limits",
            "TypeId": 254
          },
          {
            "Name": "instruction_weights",
            "TypeName": "InstructionWeights<T>",
            "TypeId": 255
          },
          {
            "Name": "host_fn_weights",
            "TypeName": "HostFnWeights<T>",
            "TypeId": 256
          },
          {
            "Name": "memory_weights",
            "TypeName": "MemoryWeights<T>",
            "TypeId": 257
          },
          {
            "Name": "module_instantiation_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "db_write_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "db_read_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "code_instrumentation_cost",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "code_instrumentation_byte_cost",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "Schedule"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "254": {
        "TypeFields": [
          {
            "Name": "stack_height",
            "TypeName": "Option<u32>",
            "TypeId": 62
          },
          {
            "Name": "globals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "locals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "parameters",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "memory_pages",
            "TypeName": "u16",
            "TypeId": 43
          },
          {
            "Name": "table_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_table_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "subject_len",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_depth",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "payload_len",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "code_len",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "Limits"
        ],
        "TypeDef": "Composite"
      },
      "255": {
        "TypeFields": [
          {
            "Name": "version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64const",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64load",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32load",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64store",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32store",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "select",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "r#if",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_if",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_table",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_table_per_entry",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_indirect",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_indirect_per_param",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_per_local",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "local_get",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "local_set",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "local_tee",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "global_get",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "global_set",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "memory_current",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64clz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32clz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ctz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32ctz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64popcnt",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32popcnt",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64eqz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32eqz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64extendsi32",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64extendui32",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32wrapi64",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64eq",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32eq",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ne",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32ne",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64lts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32lts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ltu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32ltu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64gts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32gts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64gtu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32gtu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64les",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32les",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64leu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32leu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ges",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32ges",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64geu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32geu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64add",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32add",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64sub",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32sub",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64mul",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32mul",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64divs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32divs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64divu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32divu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64rems",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32rems",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64remu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32remu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64and",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32and",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64or",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32or",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64xor",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32xor",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64shl",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32shl",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64shrs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32shrs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64shru",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32shru",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64rotl",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32rotl",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64rotr",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32rotr",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "InstructionWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "256": {
        "TypeFields": [
          {
            "Name": "alloc",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "free",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reserve_gas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_unreserve_gas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_system_reserve_gas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_gas_available",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_message_id",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_origin",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_pay_program_rent",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_program_id",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_source",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_value",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_value_available",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_size",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_read",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_read_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_block_height",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_block_timestamp",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_random",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_wgas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_wgas_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_init",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_push",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_push_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_commit",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_commit_wgas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reservation_send",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reservation_send_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reservation_send_commit",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_commit",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_commit_wgas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reservation_reply",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reservation_reply_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reservation_reply_commit",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_push",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_wgas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_wgas_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_push_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_to",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_signal_from",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_input",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_input_wgas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_push_input",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_reply_push_input_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_input",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_input_wgas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_push_input",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_send_push_input_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_debug",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_debug_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_error",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_status_code",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_exit",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_leave",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_wait",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_wait_for",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_wait_up_to",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_wake",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_create_program",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_create_program_payload_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_create_program_salt_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_create_program_wgas",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_create_program_wgas_payload_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "gr_create_program_wgas_salt_per_byte",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "HostFnWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "257": {
        "TypeFields": [
          {
            "Name": "lazy_pages_signal_read",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "lazy_pages_signal_write",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "lazy_pages_signal_write_after_read",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "lazy_pages_host_func_read",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "lazy_pages_host_func_write",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "lazy_pages_host_func_write_after_read",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "load_page_data",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "upload_page_data",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "static_page",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "mem_grow",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "parachain_read_heuristic",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "MemoryWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "258": {
        "Variants": [
          {
            "Name": "MessageNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Message wasn't found in the mailbox."
            ]
          },
          {
            "Name": "InsufficientBalanceForReserve",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not enough balance to reserve.",
              "",
              "Usually occurs when the gas_limit specified is such that the origin account can't afford the message."
            ]
          },
          {
            "Name": "GasLimitTooHigh",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Gas limit too high.",
              "",
              "Occurs when an extrinsic's declared `gas_limit` is greater than a block's maximum gas limit."
            ]
          },
          {
            "Name": "ProgramAlreadyExists",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Program already exists.",
              "",
              "Occurs if a program with some specific program id already exists in program storage."
            ]
          },
          {
            "Name": "InactiveProgram",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Program is terminated.",
              "",
              "Program init failed, so such message destination is no longer unavailable."
            ]
          },
          {
            "Name": "NoMessageTree",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Message gas tree is not found.",
              "",
              "When a message claimed from the mailbox has a corrupted or non-extant gas tree associated."
            ]
          },
          {
            "Name": "CodeAlreadyExists",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Code already exists.",
              "",
              "Occurs when trying to save to storage a program code that has been saved there."
            ]
          },
          {
            "Name": "CodeDoesntExist",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Code does not exist.",
              "",
              "Occurs when trying to get a program code from storage, that doesn't exist."
            ]
          },
          {
            "Name": "CodeTooLarge",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The code supplied to `upload_code` or `upload_program` exceeds the limit specified in the",
              "current schedule."
            ]
          },
          {
            "Name": "ProgramConstructionFailed",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Failed to create a program."
            ]
          },
          {
            "Name": "ValueLessThanMinimal",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Value doesn't cover ExistentialDeposit."
            ]
          },
          {
            "Name": "MessagesStorageCorrupted",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Messages storage corrupted."
            ]
          },
          {
            "Name": "MessageQueueProcessingDisabled",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Message queue processing is disabled."
            ]
          },
          {
            "Name": "ProgramNotFound",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Program with the specified id is not found."
            ]
          }
        ],
        "Path": [
          "pallet_gear",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "259": {
        "TypeFields": [
          {
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 161
          },
          {
            "Name": "Call",
            "TypeId": 178
          },
          {
            "Name": "Signature",
            "TypeId": 260
          },
          {
            "Name": "Extra",
            "TypeId": 264
          }
        ],
        "TypeDef": "Composite"
      },
      "260": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 147
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 261
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 262
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "261": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 124
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "262": {
        "TypeFields": [
          {
            "TypeName": "[u8; 65]",
            "TypeId": 263
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "263": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "264": {
        "TypeIds": [
          265,
          266,
          267,
          268,
          269,
          271,
          272,
          273
        ],
        "TypeDef": "Tuple"
      },
      "265": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "266": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "267": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "268": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "269": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 270
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "270": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "271": {
        "TypeFields": [
          {
            "TypeName": "T::Index",
            "TypeId": 89
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "272": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "273": {
        "TypeFields": [
          {
            "TypeName": "ChargeTransactionPayment<T>",
            "TypeId": 275
          }
        ],
        "Path": [
          "pallet_gear_payment",
          "CustomChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 274
          }
        ],
        "TypeDef": "Composite"
      },
      "274": {
        "Path": [
          "gear_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      },
      "275": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 56
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 17,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 86
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 88,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 91,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 91,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 84,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 92
        },
        "Events": {
          "TypeId": 20
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 96,
            "Value": "Yk/XWgAHVQU3nE0T//////////8CwM0XAAEHVW0ODRET7FG4HoXrUTgBB1XBDWcTEwAAAAAAAABAAQAAAsDNFwABB1WxN0JLE+tRuB6F61H4AQdVBTecTRP//////////wEHAEQpNToT/////////78CwM0XAAAAAA==",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 100,
            "Value": "AAAUAAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "YAkAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 102,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 103,
            "Value": "EGdlYXIQZ2VhcgEAAACgAAAAAQAAACzLyiXjnxQjhwIAAADfastomQdgmwQAAAA345f8fJH15AEAAABA/jrUAfiVmgYAAADSvJiX7tCPFQMAAAD3iyeL5T9FTAIAAACrPAVyKR/riwEAAADtmcWssl7t9QMAAAC8nYmQT1uSPwEAAAA3yLsTUKmiqAMAAAD/jciAN/JiIwEAAAABAAAAAQ==",
            "Docs": [
              " Get the chain's current version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 43,
            "Value": "KgA=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 108
        },
        "Index": 0
      },
      "1": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 91,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Did the timestamp get updated in this block?"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 109
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 10,
            "Value": "9AEAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 1
      },
      "2": {
        "Name": "Authorship",
        "Storage": {
          "Prefix": "Authorship",
          "Entries": [
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 2
      },
      "3": {
        "Name": "Babe",
        "Storage": {
          "Prefix": "Babe",
          "Entries": [
            {
              "Name": "EpochIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current epoch index."
              ]
            },
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 110,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current epoch authorities."
              ]
            },
            {
              "Name": "GenesisSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 115,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The slot at which the first epoch actually started. This is 0",
                " until the first block of the chain."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 115,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current slot number."
              ]
            },
            {
              "Name": "Randomness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 1,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The epoch randomness for the *current* epoch.",
                "",
                " # Security",
                "",
                " This MUST NOT be used for gambling, as it can be influenced by a",
                " malicious validator in the short term. It MAY be used in many",
                " cryptographic protocols, however, so long as one remembers that this",
                " (like everything else on-chain) it is public. For example, it can be",
                " used where a number is needed that cannot have been chosen by an",
                " adversary, for purposes such as public-coin zero-knowledge proofs."
              ]
            },
            {
              "Name": "PendingEpochConfigChange",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 116,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Pending epoch configuration change that will be applied when the next epoch is enacted."
              ]
            },
            {
              "Name": "NextRandomness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 1,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Next epoch randomness."
              ]
            },
            {
              "Name": "NextAuthorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 110,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Next epoch authorities."
              ]
            },
            {
              "Name": "SegmentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Randomness under construction.",
                "",
                " We make a trade-off between storage accesses and list length.",
                " We store the under-construction randomness in segments of up to",
                " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                "",
                " Once a segment reaches this length, we begin the next one.",
                " We reset all segments and return to `0` at the beginning of every",
                " epoch."
              ]
            },
            {
              "Name": "UnderConstruction",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 119
                }
              },
              "Default": "AA==",
              "Docs": [
                " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
              ]
            },
            {
              "Name": "Initialized",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 121,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Temporary value (cleared at block finalization) which is `Some`",
                " if per-block initialization has already been called for current block."
              ]
            },
            {
              "Name": "AuthorVrfRandomness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 127,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " This field should always be populated during block processing unless",
                " secondary plain slots are enabled (which don't contain a VRF output).",
                "",
                " It is set in `on_finalize`, before it will contain the value from the last block."
              ]
            },
            {
              "Name": "EpochStart",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 87,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The block numbers when the last and current epoch have started, respectively `N-1` and",
                " `N`.",
                " NOTE: We track this is in order to annotate the block number when a given pool of",
                " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                " slots, which may be skipped, the block numbers may not line up with the slot numbers."
              ]
            },
            {
              "Name": "Lateness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " How late the current block is compared to its parent.",
                "",
                " This entry is populated as part of block execution and is cleaned up",
                " on block finalization. Querying this storage entry outside of block",
                " execution context should always yield zero."
              ]
            },
            {
              "Name": "EpochConfig",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 128,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The configuration for the current epoch. Should never be `None` as it is initialized in",
                " genesis."
              ]
            },
            {
              "Name": "NextEpochConfig",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 128,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The configuration for the next epoch, `None` if the config will not change",
                " (you can fallback to `EpochConfig` instead in that case)."
              ]
            },
            {
              "Name": "SkippedEpochs",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 129,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A list of the last 100 skipped epochs and the corresponding session index",
                " when the epoch was skipped.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof",
                " must contains a key-ownership proof for a given session, therefore we need a",
                " way to tie together sessions and epoch indices, i.e. we need to validate that",
                " a validator was the owner of a given key on a given session, and what the",
                " active epoch index was during that session."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 132
        },
        "Events": null,
        "Constants": [
          {
            "Name": "EpochDuration",
            "TypeId": 10,
            "Value": "IBwAAAAAAAA=",
            "Docs": [
              " The amount of time, in slots, that each epoch should last.",
              " NOTE: Currently it is not possible to change the epoch duration after",
              " the chain has started. Attempting to do so will brick block production."
            ]
          },
          {
            "Name": "ExpectedBlockTime",
            "TypeId": 10,
            "Value": "6AMAAAAAAAA=",
            "Docs": [
              " The expected average block time at which BABE should be creating",
              " blocks. Since BABE is probabilistic it is not trivial to figure out",
              " what the expected average block time should be based on the slot",
              " duration and the security parameter `c` (where `1 - c` represents",
              " the probability of a slot being empty)."
            ]
          },
          {
            "Name": "MaxAuthorities",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " Max number of authorities allowed"
            ]
          }
        ],
        "Errors": {
          "TypeId": 137
        },
        "Index": 3
      },
      "4": {
        "Name": "Grandpa",
        "Storage": {
          "Prefix": "Grandpa",
          "Entries": [
            {
              "Name": "State",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 138,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " State of the current authority set."
              ]
            },
            {
              "Name": "PendingChange",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 139,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Pending change: (signaled at, scheduled change)."
              ]
            },
            {
              "Name": "NextForced",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " next block number where we can force a change."
              ]
            },
            {
              "Name": "Stalled",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 87,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " `true` if we are currently stalled."
              ]
            },
            {
              "Name": "CurrentSetId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of changes (both in terms of keys and underlying economic responsibilities)",
                " in the \"set\" of Grandpa validators from genesis."
              ]
            },
            {
              "Name": "SetIdSession",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 10,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                " members were responsible.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof must",
                " contains a key-ownership proof for a given session, therefore we need a way to tie",
                " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                " was the owner of a given key on a given session, and what the active set ID was",
                " during that session.",
                "",
                " TWOX-NOTE: `SetId` is not under user control."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 141
        },
        "Events": {
          "TypeId": 29
        },
        "Constants": [
          {
            "Name": "MaxAuthorities",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " Max Authorities in use"
            ]
          },
          {
            "Name": "MaxSetIdSessionEntries",
            "TypeId": 10,
            "Value": "AAAAAAAAAAA=",
            "Docs": [
              " The maximum number of entries to keep in the set id to session index mapping.",
              "",
              " Since the `SetIdSession` map is only used for validating equivocations this",
              " value should relate to the bonding duration of whatever staking system is",
              " being used (if any). If equivocation handling is not enabled then this value",
              " can be zero."
            ]
          }
        ],
        "Errors": {
          "TypeId": 152
        },
        "Index": 4
      },
      "5": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 153
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 157
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 160
        },
        "Events": {
          "TypeId": 34
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "9AEAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open."
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          }
        ],
        "Errors": {
          "TypeId": 164
        },
        "Index": 5
      },
      "6": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 165,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 166,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 36
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 6
      },
      "7": {
        "Name": "Session",
        "Storage": {
          "Prefix": "Session",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 167,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators."
              ]
            },
            {
              "Name": "CurrentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current index of the session."
              ]
            },
            {
              "Name": "QueuedChanged",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 91,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "Name": "QueuedKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 168,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "Name": "DisabledValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 171,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 170
                }
              },
              "Default": "AA==",
              "Docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "Name": "KeyOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 172,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 174
        },
        "Events": {
          "TypeId": 37
        },
        "Constants": [],
        "Errors": {
          "TypeId": 175
        },
        "Index": 7
      },
      "8": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 176
        },
        "Events": {
          "TypeId": 38
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 188
        },
        "Index": 8
      },
      "9": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 189
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 193
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 179
        },
        "Events": {
          "TypeId": 41
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "dgIAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "vAcAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "dgIAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "eA8AAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 197
        },
        "Index": 9
      },
      "10": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 198,
                  "Value": 199
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 181
        },
        "Events": {
          "TypeId": 44
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "NhUAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "gAcAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 201
        },
        "Index": 10
      },
      "98": {
        "Name": "ValidatorSet",
        "Storage": {
          "Prefix": "ValidatorSet",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 167,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ApprovedValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 167,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "OfflineValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 167,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 183
        },
        "Events": {
          "TypeId": 46
        },
        "Constants": [],
        "Errors": {
          "TypeId": 202
        },
        "Index": 98
      },
      "99": {
        "Name": "Sudo",
        "Storage": {
          "Prefix": "Sudo",
          "Entries": [
            {
              "Name": "Key",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The `AccountId` of the sudo key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 184
        },
        "Events": {
          "TypeId": 47
        },
        "Constants": [],
        "Errors": {
          "TypeId": 203
        },
        "Index": 99
      },
      "100": {
        "Name": "GearProgram",
        "Storage": {
          "Prefix": "GearProgram",
          "Entries": [
            {
              "Name": "CodeStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 81,
                  "Value": 204
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "CodeLenStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 81,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "OriginalCodeStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 81,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "MetadataStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 81,
                  "Value": 209
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ProgramStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 51,
                  "Value": 210
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "MemoryPageStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 222,
                  "Value": 223
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "WaitingInitStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 51,
                  "Value": 225
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "PausedProgramStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 51,
                  "Value": 226
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 227
        },
        "Index": 100
      },
      "101": {
        "Name": "GearMessenger",
        "Storage": {
          "Prefix": "GearMessenger",
          "Entries": [
            {
              "Name": "Dequeued",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Dispatches",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 50,
                  "Value": 228
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "CounterForDispatches",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "Head",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 50,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Mailbox",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 239,
                  "Value": 240
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "QueueProcessing",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 91,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Sent",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Tail",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 50,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Waitlist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 242,
                  "Value": 243
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "DispatchStash",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 50,
                  "Value": 243
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 244
        },
        "Index": 101
      },
      "102": {
        "Name": "GearScheduler",
        "Storage": {
          "Prefix": "GearScheduler",
          "Entries": [
            {
              "Name": "FirstIncompleteTasksBlock",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "TaskPool",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 245,
                  "Value": 40
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "ReserveThreshold",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " Amount of blocks for extra delay used to secure from outdated tasks."
            ]
          },
          {
            "Name": "WaitlistCost",
            "TypeId": 10,
            "Value": "ZAAAAAAAAAA=",
            "Docs": [
              " Cost for storing in waitlist per block."
            ]
          },
          {
            "Name": "MailboxCost",
            "TypeId": 10,
            "Value": "ZAAAAAAAAAA=",
            "Docs": [
              " Cost for storing in mailbox per block."
            ]
          },
          {
            "Name": "ReservationCost",
            "TypeId": 10,
            "Value": "ZAAAAAAAAAA=",
            "Docs": [
              " Cost for reservation holding."
            ]
          },
          {
            "Name": "DispatchHoldCost",
            "TypeId": 10,
            "Value": "ZAAAAAAAAAA=",
            "Docs": [
              " Cost for reservation holding."
            ]
          }
        ],
        "Errors": {
          "TypeId": 247
        },
        "Index": 102
      },
      "103": {
        "Name": "GearGas",
        "Storage": {
          "Prefix": "GearGas",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "GasNodes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 73,
                  "Value": 248
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Allowance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AEQpNToAAAA=",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "BlockGasLimit",
            "TypeId": 10,
            "Value": "AEQpNToAAAA=",
            "Docs": [
              " The maximum amount of gas that can be used within a single block."
            ]
          }
        ],
        "Errors": {
          "TypeId": 252
        },
        "Index": 103
      },
      "104": {
        "Name": "Gear",
        "Storage": {
          "Prefix": "Gear",
          "Entries": [
            {
              "Name": "ExecuteInherent",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 91,
                "Item2": null
              },
              "Default": "AQ==",
              "Docs": [
                " A flag indicating whether the message queue should be processed at the end of a block",
                "",
                " If not set, the inherent extrinsic that processes the queue will keep throwing an error",
                " thereby making the block builder exclude it from the block."
              ]
            },
            {
              "Name": "BlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed.",
                "",
                " It shows block number in which queue is processed.",
                " May be less than system pallet block number if panic occurred previously."
              ]
            },
            {
              "Name": "LastGearBlockNumber",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The Gear block number before processing messages.",
                "",
                " A helper variable that mirrors the `BlockNumber` at the beginning of a block.",
                " Allows to gauge the actual `BlockNumber` progress."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 185
        },
        "Events": {
          "TypeId": 49
        },
        "Constants": [
          {
            "Name": "Schedule",
            "TypeId": 253,
            "Value": "AAABAAAABAAAgAAAAAACABAAAAABAAAgAAAAIAAAAAAAgAAAAAgABgAAAJYAAAAaGgAAVRoAACOBAAAUSgAA1BwAALsYAACFDAAA5BYAANAlAABnAQAA4hEAANtMAAAMCQAAAAAAAHcCAADtBQAAXgYAACYHAACxCgAAwjkAALQZAABIGAAANRgAAOgUAADbBAAAEAMAAHgOAAA0CQAARwMAAMwBAABaAQAA/A0AAG8JAACWDgAA1AgAAPINAABHCQAACA4AAHgJAAC9DgAAxggAAGwOAACACAAA9g0AAKsIAAAADwAAXQgAAE4NAAAsCAAA4g0AAM0IAAAbCgAAzQQAAHcJAAApBAAA/QwAAG0JAAABDgAAuw4AABoUAADjEAAAi0QAAG03AADzEAAAFxIAAKcJAABiBAAAQAkAAN8DAAC0CQAAEQUAAEwIAADuAwAASwgAAOwDAAAZCAAAjwQAAL8IAAAmBAAAwgcAADgEAAB+QHcAAOaRdQAAWgb0AAA+ERUBAMqmpwAAfvqkAACe26QAAML3pAAABg8DAAAWnqUAAP4PqwAAHu6nAAAu2qgAAJ5uqAAAIlzoAACNAgAWtaMAAOLCpQAAihjcAACq0EQBAM0EADY6RgEAwQQAYkurAAAuzvEAAJ0GAGoKIgEAvvkrAQAucE8BAM0EAE4sLAEAUoEKBQDG6o8FAO6CgwMArtsdAAAi9agDAA6J6QAA4v8vBQB1BwBS6fQEAF0HAI0KAEbApgAA0gOoAACumkgGALqLRgMAQuK1AADBAQCKjVQBAD5GVAEA3vXAAABhAgAaqqoAAMkFAMoU3AAAXjmjAAAmdYAGACKrkQMAduS/AgBOOckCANo0BAQAriTxAAC2IYABALEBACUeAKZjgQEAwQEATR4AdviwBgCOil0IADLJZQIA/l33BgAG13QIAFoNJQIASvMjAgCCNaUYAJEBAJEBAAAA2ScANQMABQsAQgsSQ+08PjoDAAA=",
            "Docs": [
              " Cost schedule and limits."
            ]
          },
          {
            "Name": "OutgoingLimit",
            "TypeId": 4,
            "Value": "AAQAAA==",
            "Docs": [
              " The maximum amount of messages that can be produced in single run."
            ]
          },
          {
            "Name": "MailboxThreshold",
            "TypeId": 10,
            "Value": "uAsAAAAAAAA=",
            "Docs": [
              " The minimal gas amount for message to be inserted in mailbox.",
              "",
              " This gas will be consuming as rent for storing and message will be available",
              " for reply or claim, once gas ends, message removes.",
              "",
              " Messages with gas limit less than that minimum will not be added in mailbox,",
              " but will be seen in events."
            ]
          },
          {
            "Name": "ReservationsLimit",
            "TypeId": 10,
            "Value": "AAEAAAAAAAA=",
            "Docs": [
              " Amount of reservations can exist for 1 program."
            ]
          },
          {
            "Name": "ProgramRentFreePeriod",
            "TypeId": 4,
            "Value": "QEtMAA==",
            "Docs": [
              " The free of charge period of rent."
            ]
          },
          {
            "Name": "ProgramRentMinimalResumePeriod",
            "TypeId": 4,
            "Value": "gFEBAA==",
            "Docs": [
              " The minimal amount of blocks to resume."
            ]
          },
          {
            "Name": "ProgramRentCostPerBlock",
            "TypeId": 6,
            "Value": "QFlzBwAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The program rent cost per block."
            ]
          }
        ],
        "Errors": {
          "TypeId": 258
        },
        "Index": 104
      },
      "105": {
        "Name": "GearPayment",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 105
      }
    },
    "Extrinsic": {
      "TypeId": 259,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 265,
          "AddSignedExtType": 40
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 266,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 267,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 268,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 269,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 271,
          "AddSignedExtType": 40
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 272,
          "AddSignedExtType": 40
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 273,
          "AddSignedExtType": 40
        }
      ]
    },
    "TypeId": 274
  }
}